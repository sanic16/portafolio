
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role Role @default(USER)
  projects Project[]
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
} 

model Project {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageUrl String
  websiteUrl String
  githubUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lang Lang @default(ES) 
  
  // Relation
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  categoryIds String[] @db.ObjectId
  categories Category[] @relation(fields: [categoryIds], references: [id])

}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  // Relation
  projectsIds String[] @db.ObjectId
  projects Project[] @relation(fields: [projectsIds], references: [id]) 
}

model Post{
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  title String
  content String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  PostCategoryIds String[] @db.ObjectId
  postCategories PostCategory[] @relation(fields: [PostCategoryIds], references: [id])
}

model PostCategory{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  // Relation
  postsIds String[] @db.ObjectId
  posts Post[] @relation(fields: [postsIds], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Lang {
  EN
  ES
}
